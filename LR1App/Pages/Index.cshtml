@page
@using Azure.Identity;
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Azure.Storage.Blobs.Specialized;

@functions {
    public BlobContainerClient authenticate(string STRING_FROM_EXPLORER, string CONTAINER_NAME)
    {
        // Create a client that can authenticate with a connection string
        BlobServiceClient blobServiceClient = new BlobServiceClient(STRING_FROM_EXPLORER);

        BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(CONTAINER_NAME);
        return containerClient;
    }

    public async Task<string> create(BlobContainerClient containerClient, string containerName, string fileName)
    {
        try
        {
            // Define the file content you want to upload
            string fileContent = "Hello, World112312312123!";
            byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);

            // Convert the byte array to a stream
            using (MemoryStream stream = new MemoryStream(byteArray))
            {
                // Get a reference to the blob
                BlobClient blobClient = containerClient.GetBlobClient($"{fileName}.txt");

                // Upload the stream to the blob
                await blobClient.UploadAsync(stream, overwrite: true);
            }

            return "Success";
        }
        catch (Exception e)
        {
            return $"Error while creating: {e}";
        }
    }
    public async Task<string> delete(BlobContainerClient containerClient, string CONTAINER_NAME, string FILE_NAME)
    {
        try
        {
            BlobClient blobClient = containerClient.GetBlobClient($"{FILE_NAME}.txt");
            await blobClient.DeleteAsync();
            return "Success";
        }
        catch (Exception e)
        {
            return "Error while creating: " + e.ToString();
        }
    }
    public async Task<List<string>> listing(BlobContainerClient containerClient)
    {
        var list = new List<string>();

        await foreach (var blobItem in containerClient.GetBlobsAsync())
        {
            list.Add(blobItem.Name);
        }
        return list;
    }
}

@{
    // Write there String for container from explorer
    string storageConnectionString ="SharedAccessSignature=sv=2023-01-03&ss=btqf&srt=sco&st=2024-02-18T17%3A05%3A30Z&se=2024-02-19T17%3A05%3A30Z&sp=rwdxtlacup&sig=SAZpHm%2BCtf%2BNegh9fut1OuQRQ7repfQMCS%2Fza83C5%2Bo%3D;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;FileEndpoint=http://devstoreaccount1.file.core.windows.net;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;";
    // Write container name
    string containerName = "111";
    string fileName = "abc";

    BlobContainerClient containerClient = authenticate(storageConnectionString, containerName);
    string result = "";
    @* result = create(containerClient, containerName, fileName).Result; *@
    @* result = string.Join(", ", listing(containerClient).Result); *@
    @* result = delete(containerClient, containerName, fileName).Result; *@
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    @* <button onclick="document.getElementById(" result").innerHTML='@{
    string.Join(", ", await listing(containerClient));
    }'">
    List
    </button>
    <button onclick=" document.getElementById('result').innerHTML='@{
    result = await delete(containerClient, containerName, fileName);
    }'">
    Delete
    </button> *@
    <div id=" result">@result
    </div>
</div>